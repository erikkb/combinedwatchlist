package com.combinedwatchlist.combined_watchlist.user;

import com.combinedwatchlist.combined_watchlist.user.dto.ProfileUpdateRequest;
import com.combinedwatchlist.combined_watchlist.user.dto.RegisterRequest;
import com.combinedwatchlist.combined_watchlist.watchlist.Watchlist;
import com.combinedwatchlist.combined_watchlist.watchlist.WatchlistService;
import jakarta.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.security.web.context.HttpSessionSecurityContextRepository;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.server.ResponseStatusException;


import java.time.LocalDateTime;
import java.util.*;

import static org.springframework.http.HttpStatus.BAD_REQUEST;
import static org.springframework.http.HttpStatus.NOT_FOUND;

@Service
public class UserService {

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final WatchlistService watchlistService;
    private final PasswordResetTokenRepository passwordResetTokenRepository;
    private final JavaMailSender mailSender;
    private final String appBaseUrl;
    private final String frontendBaseUrl;
    private final boolean reactMode;
    private final JdbcTemplate jdbcTemplate;

    public UserService(UserRepository userRepository, PasswordEncoder passwordEncoder, WatchlistService watchlistService,
                       PasswordResetTokenRepository passwordResetTokenRepository, JavaMailSender mailSender, @Value("${app.base-url}") String appBaseUrl, JdbcTemplate jdbcTemplate, @Value("${frontend.base-url}") String frontendBaseUrl, @Value("${app.react-mode}") boolean reactMode) {
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
        this.watchlistService = watchlistService;
        this.passwordResetTokenRepository = passwordResetTokenRepository;
        this.mailSender = mailSender;
        this.appBaseUrl = appBaseUrl;
        this.jdbcTemplate = jdbcTemplate;
        this.frontendBaseUrl = frontendBaseUrl;
        this.reactMode = reactMode;
    }

    public void register(RegisterRequest request, HttpSession session) {
        if (userRepository.findByUsername(request.username()).isPresent()) {
            throw new RegistrationException("Username already taken.");
        }

        User user = new User();
        user.setUsername(request.username());
        user.setPassword(passwordEncoder.encode(request.password()));
        user.setEmail(request.email());

        //reassign since id is generated by the database via save() function
        user = userRepository.save(user);

        // Migrate guest watchlist to DB
        if (session.getAttribute("watchlist") != null) {
            watchlistService.migrateGuestWatchlistToUser(session, user.getId());
        } else {
            Watchlist watchlist = new Watchlist();
            watchlist.setUserId(user.getId());
            watchlist.setMovieIds(Collections.emptyList());
            watchlist.setShowIds(Collections.emptyList());
            session.setAttribute("watchlist", watchlist);
            watchlistService.migrateGuestWatchlistToUser(session, user.getId());
        }

        loginUser(user, session);
    }

    // This method is used to log in the user after registration
    private void loginUser(User user, HttpSession session) {
        UserDetails userDetails = new org.springframework.security.core.userdetails.User(
                user.getUsername(),
                user.getPassword(), // already hashed
                List.of(new SimpleGrantedAuthority("ROLE_" + user.getRole()))
        );

        Authentication authentication = new UsernamePasswordAuthenticationToken(
                userDetails, null, userDetails.getAuthorities()
        );

        SecurityContextHolder.getContext().setAuthentication(authentication);

        session.setAttribute(
                HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY,
                SecurityContextHolder.getContext()
        );

        session.setAttribute("userId", user.getId());
    }

    public User findByUsername(String username) {
        return userRepository.findByUsername(username)
                .orElseThrow(() -> new IllegalStateException("Authenticated user not found in DB"));
    }

    public void updateUser(String username, ProfileUpdateRequest updates) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new IllegalStateException("User not found"));

        if (updates.password() != null && !updates.password().isBlank()) {
            user.setPassword(passwordEncoder.encode(updates.password()));
        }

        if (updates.email() != null && !updates.email().isBlank()) {
            user.setEmail(updates.email());
        }

        userRepository.save(user);
    }

    @Transactional
    public void deleteUser(String username) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new IllegalStateException("User not found"));

        // Delete the user's watchlist
        watchlistService.delete(user.getId());

        // Delete the user
        userRepository.delete(user);
    }

    @Transactional
    public void requestPasswordReset(String email) {
        // Find the user by email
        Optional<User> userOptional = userRepository.findByEmail(email);
        if (userOptional.isEmpty()) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found with provided email");
        }

        User user = userOptional.get();

        // Delete any existing reset tokens for this user
        passwordResetTokenRepository.deleteByUserId(user.getId());

        // Generate a new reset token
        String token = UUID.randomUUID().toString();
        LocalDateTime expiresAt = LocalDateTime.now().plusMinutes(15);

        PasswordResetToken resetToken = new PasswordResetToken(
                null,  // id will be autogenerated (BIGSERIAL)
                user.getId(),
                token,
                expiresAt
        );

        passwordResetTokenRepository.save(resetToken);

        // Build the reset URL
        String resetUrl;
        if (reactMode) {
            resetUrl = appBaseUrl + "/reset-password.html?token=" + token;
        } else {
            //vite/react don't want .html in the URL (planning to serve react app as SPA from /static)
            resetUrl = frontendBaseUrl + "/reset-password?token=" + token;
        }

        // Send the email
        SimpleMailMessage mailMessage = new SimpleMailMessage();
        mailMessage.setTo(user.getEmail());
        mailMessage.setSubject("Password Reset Request");
        mailMessage.setText("To reset your password, click the following link (expires in 15 minutes): " + resetUrl);
        mailSender.send(mailMessage);
    }

    public void resetPasswordWithToken(String token, String newPassword) {
        PasswordResetToken resetToken = passwordResetTokenRepository.findByToken(token)
                .orElseThrow(() -> new ResponseStatusException(BAD_REQUEST, "Invalid or expired token."));

        if (resetToken.expiresAt().isBefore(LocalDateTime.now())) {
            throw new ResponseStatusException(BAD_REQUEST, "Token has expired.");
        }

        User user = userRepository.findById(resetToken.userId())
                .orElseThrow(() -> new ResponseStatusException(NOT_FOUND, "User not found."));

        user.setPassword(passwordEncoder.encode(newPassword));
        userRepository.save(user);

        passwordResetTokenRepository.deleteByToken(token);
    }

    /**
     * Spring Data JDBC only starts supporting derived delete queries with @Query Annotation starting in version 3.4.5 so this function is in Service instead of Repository
     */
    @Scheduled(cron = "0 0 3 * * *")
    @Transactional
    public void cleanUpExpiredTokens() {
        try {
            LocalDateTime now = LocalDateTime.now();
            int rows = jdbcTemplate.update("DELETE FROM password_reset_tokens WHERE expires_at < ?", now);
            System.out.println("[CLEANUP] Deleted " + rows + " expired password reset tokens.");
        } catch (Exception e) {
            System.err.println("[CLEANUP] Failed to clean expired password reset tokens: " + e.getMessage());
        }
    }
}

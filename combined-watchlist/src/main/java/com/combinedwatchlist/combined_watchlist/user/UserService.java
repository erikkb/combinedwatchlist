package com.combinedwatchlist.combined_watchlist.user;

import com.combinedwatchlist.combined_watchlist.user.dto.RegisterRequest;
import com.combinedwatchlist.combined_watchlist.watchlist.WatchlistService;
import jakarta.servlet.http.HttpSession;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.security.web.context.HttpSessionSecurityContextRepository;


import java.util.List;
import java.util.Map;

@Service
public class UserService {

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final WatchlistService watchlistService;

    public UserService(UserRepository userRepository, PasswordEncoder passwordEncoder, WatchlistService watchlistService) {
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
        this.watchlistService = watchlistService;
    }

    public void register(RegisterRequest request, HttpSession session) {
        if (userRepository.findByUsername(request.username()).isPresent()) {
            throw new RegistrationException("Username already taken.");
        }

        User user = new User();
        user.setUsername(request.username());
        user.setPassword(passwordEncoder.encode(request.password()));
        user.setEmail(request.email());

        //reassign since id is generated by the database via save() function
        user = userRepository.save(user);

        // Migrate guest watchlist to DB
        watchlistService.migrateGuestWatchlistToUser(session, user.getId());

//        session.setAttribute("userId", user.getId());

        loginUser(user, session);
    }

    // This method is used to log in the user after registration
    private void loginUser(User user, HttpSession session) {
        UserDetails userDetails = new org.springframework.security.core.userdetails.User(
                user.getUsername(),
                user.getPassword(), // already hashed
                List.of(new SimpleGrantedAuthority("ROLE_" + user.getRole()))
        );

        Authentication authentication = new UsernamePasswordAuthenticationToken(
                userDetails, null, userDetails.getAuthorities()
        );

        SecurityContextHolder.getContext().setAuthentication(authentication);

        session.setAttribute(
                HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY,
                SecurityContextHolder.getContext()
        );

        session.setAttribute("userId", user.getId());
    }

    public User findByUsername(String username) {
        return userRepository.findByUsername(username)
                .orElseThrow(() -> new IllegalStateException("Authenticated user not found in DB"));
    }

    public void updateUser(String username, Map<String, String> updates) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new IllegalStateException("User not found"));

        if (updates.containsKey("password")) {
            user.setPassword(passwordEncoder.encode(updates.get("password")));
        }
        if (updates.containsKey("email")) {
            user.setEmail(updates.get("email"));
        }

        userRepository.save(user);
    }


}
